description: Adds logging to non-compliant WebACLs
schemaVersion: "0.3"
assumeRole: "{{ AutomationAssumeRole }}"
parameters:
  WebACLId:
    type: String
  AutomationAssumeRole:
    type: String
mainSteps:
  - name: performRemediation
    action: "aws:executeScript"
    inputs:
      Runtime: python3.7
      Handler: handler
      Script: |-
        import boto3
        import json
        import os

        #
        # This Lambda function ensures that all WAF web ACLs have logging enabled.
        #
        # Trigger Type: SSM Automation
        # Scope of Automation: AWS::WAF::WebACL & AWS::WAFRegional::WebACL
        #

        CLOUDWATCH_LOG_GROUP = 'aws-waf-logs-AWSAccelerator'

        def evaluate_compliance(webAclName):
          hasConfig = False

          #Setting up variables
          client = ''
          response = ''
          wafArn = ''
          cloudwatchArn = ''


          #Check if this is a WAFv2. The ResourceId passed in is already the ARN
          if webAclName.find(':wafv2:') >= 0:
            wafArn = webAclName
            client = boto3.client('wafv2')
          else:

            isWebAcl = True
            #Test if this is AWS::WAF::WebACL
            try:
              print('Testing for WAF::WebACL')
              client = boto3.client('waf')
              response = client.get_web_acl(WebACLId=webAclName)
            except:
              isWebAcl = False
              pass

            if not isWebAcl:
              #Test if this is AWS::WAFRegional::WebACL
              try:
                print('Testing for WAFRegional::WebACL')
                client = boto3.client('waf-regional')
                response = client.get_web_acl(WebACLId=webAclName)
              except:
                pass

            wafArn = response['WebACL']['WebACLArn']
            print('wafArn:' + wafArn)


          try:
            response = client.get_logging_configuration(ResourceArn=wafArn)
            hasConfig = True
          except:
            print('Attempting to fix non-compliance')
            print('WAF ARN: ' + wafArn)
            
            cwClient = boto3.client('logs')
            
            # check if CloudWatch log group exists
            log_group_exists = False
            response = cwClient.describe_log_groups(logGroupNamePrefix=CLOUDWATCH_LOG_GROUP)
            log_groups = response['logGroups']
            print('LogGroups')
            print(log_groups)
            for log_group in log_groups:
                if log_group['logGroupName'] == CLOUDWATCH_LOG_GROUP:
                    log_group_exists = True
                    cloudwatchArn = log_group['arn'] #record ARN
                    print('Log group already exists. Using:' + cloudwatchArn)
            
            #create log group if not exists
            if log_group_exists == False:
              print('Creating log group:' + CLOUDWATCH_LOG_GROUP)
              response = cwClient.create_log_group(
                logGroupName=CLOUDWATCH_LOG_GROUP
              )
              print('Response from CreateLogGroup')
              print(response)
              #get newly created log group ARN
              response = cwClient.describe_log_groups(logGroupNamePrefix=CLOUDWATCH_LOG_GROUP)
              log_groups = response['logGroups']
              for log_group in log_groups:
                if log_group['logGroupName'] == CLOUDWATCH_LOG_GROUP:
                  cloudwatchArn = log_group['arn'] #record ARN
          
            cloudwatchArn=cloudwatchArn.rstrip('*')
            cloudwatchArn=cloudwatchArn.rstrip(':')
            print('cloudwatchArn:' + cloudwatchArn)
            print('Attempting to put ' + cloudwatchArn + 'as logging configuration for ' + wafArn)
            response = client.put_logging_configuration(LoggingConfiguration={'ResourceArn': wafArn,'LogDestinationConfigs': [ cloudwatchArn ]})
            print ('## RESPONSE')
            print(response)

        def handler(event, context):
          print('## ENVIRONMENT VARIABLES')
          print(os.environ)
          print('## EVENT')
          print(event)
          aclName = event['WebACLId']
          evaluate_compliance(aclName)
      InputPayload:
        WebACLId: "{{ WebACLId }}"
